# The service name, a service is a collection of related functions
service: takealot-product-tracker

# Plugins used by serverless framework for this service
plugins:
  # Do pip install in a docker image that reproduces the aws lambda environment
  # as some python packages are OS specific
  - serverless-python-requirements
  # handle API GW events by converting them to wsgi so that Flask can be used
  - serverless-wsgi

# Define what should be excluded when zipping up the lambda
package:
  exclude:
    - node_modules/**
    - venv/**
    - docs/**
    - data/**
    - tests/**
    - package.json
    - package-lock.json
    - run_integration_tests.sh
    - run_unit_tests.sh

custom:
  # dynamodb
  tracker_table_name: "tracker_service_${self:provider.stage}"

  # http via wsgi
  wsgi:
    app: tracker_service.api.app
    packRequirements: false
    pythonBin: python

  # python build
  pythonRequirements:
    fileName: requirements-aws.txt
    noDeploy: []
    dockerizePip: true

provider:
  # By default AWS keeps all versions of the function, this is not needed
  versionFunctions: false
  logRetentionInDays: 30
  name: aws
  runtime: python3.7
  memorySize: 128
  stage: dev
  region: eu-west-1
  profile: private


# IAM roles to access resources defined later in the file
  iamRoleStatements:
 
    # DynamoDB
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["TakealotTrackerTable", "Arn" ] }

  # Define environment variables
  environment:
    TRACKER_TABLE_NAME: ${self:custom.tracker_table_name}

  # Define API keys, values will be generated by AWS
  apiKeys:
    - tracker_service_apikey_${self:provider.stage}

functions:
  app:
    handler: wsgi.handler
    timeout: 5
    events:
      - http: ANY /
        cors: true
      - http: 'ANY {proxy+}'
  task:
    handler: task.scheduled_task
    environment:
      TAKEALOT_API_URL: 'https://api.takealot.com/rest/v-1-9-0/product-details/{pldcode}?platform=desktop'
    events:
      - schedule: rate(10 hours)

resources:
  Resources:
    # DynamoDB Table
    TakealotTrackerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: partition_key
            AttributeType: S
          -
            AttributeName: sort_key
            AttributeType: S

        KeySchema:
          -
            AttributeName: partition_key
            KeyType: HASH
          -
            AttributeName: sort_key
            KeyType: RANGE

        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tracker_table_name}
